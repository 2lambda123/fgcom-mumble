<?xml version="1.0"?>

<PropertyList>
 <comment>
  <![CDATA[
    This is the protocol definition for fgcom-mumble - a realtime communication
    middleware based on Mumble for FlightGear
    See https://github.com/hbeni/fgcom-mumble

    Install: just copy the protocol file to your flightgear installation
             `Protocol` folder to make it available to flightgear.

    Usage in launcher:
    # fgfs --generic=socket,out,<hz>,<host>,16661,udp,fgcom-mumble

    Check flightgear is sending data with:
    #  netcat -u -l -p 16661

    You can also send data to the plugin manually:
    (<clientport> will be reported from mumble when the first UDP packet arrives)
    #  echo "COM1_FRQ=123.45,COM1_PTT=1,......" | netcat -q0 -u localhost 16661 -p <clientport>
    
  ]]>
 </comment>

 <generic>

  <!-- The following output is expected to be parsed from the mumble-plugin.
       It will be designed so that order or occurrence of the fields does not matter:
       The fields are parsed from left to right and the values updated accordingly.
       
       If a field is missing (or its content is empty), the previous value will stay intact.
       We supply most stuff here as string to the protocol, so the plugin can
       distinguish between "missing" and "zero" values.
  -->
  <output>
   <line_separator>newline</line_separator>
   <var_separator>,</var_separator>

   <!--  ###############  -->
   <!--  #    RADIOS   #  -->
   <!--  ###############  -->

   <!-- COM 1 -->
   <chunk>
    <name>com1-frequency</name>
    <type>string</type>
    <format>COM1_FRQ=%s</format>
    <node>/instrumentation/comm[0]/fgcom-mumble/selected-mhz</node>
   </chunk>
   <chunk>
    <name>com1-channel-width-khz</name>
    <type>string</type>
    <format>COM1_CWKHZ=%s</format>
    <node>/instrumentation/comm[0]/frequencies/selected-channel-width-khz</node>
   </chunk>
   <chunk>
    <name>com1-powerbutton</name>
    <type>string</type>
    <format>COM1_PBT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[0]/operable</node>
    <!-- ^^ we use the operable property because it honors all conditions (powered, serviceable, turned on) -->
   </chunk>
   <chunk>
    <name>com1-ptt</name>
    <type>string</type>
    <format>COM1_PTT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[0]/fgcom-mumble/ptt</node>
   </chunk>
   <chunk>
    <name>com1-vol</name>
    <type>string</type>
    <format>COM1_VOL=%s</format> <!-- 0.0=mute, <=1.0 full -->
    <node>/instrumentation/comm[0]/fgcom-mumble/volume</node>
   </chunk>
   <chunk>
    <name>com1-txpwr</name>
    <type>string</type>
    <format>COM1_PWR=%s</format> <!-- in watts; Bendix KX165A typical 10w and yields a range of about 50nm@1500ft altitude?? -->
    <node>/instrumentation/comm[0]/tx-power</node>
   </chunk>
   <chunk>
    <name>com1-squelch</name>
    <type>string</type>
    <format>COM1_SQC=%s</format> <!-- 0.0=cutoff nothing, 1.0=cutoff any -->
    <node>/instrumentation/comm[0]/cutoff-signal-quality</node>
   </chunk>

   <!-- COM 2 -->
   <chunk>
    <name>com2-frequency</name>
    <type>string</type>
    <format>COM2_FRQ=%s</format>
    <node>/instrumentation/comm[1]/fgcom-mumble/selected-mhz</node>
   </chunk>
   <chunk>
    <name>com2-channel-width-khz</name>
    <type>string</type>
    <format>COM2_CWKHZ=%s</format>
    <node>/instrumentation/comm[1]/frequencies/selected-channel-width-khz</node>
   </chunk>
   <chunk>
    <name>com2-powerbutton</name>
    <type>string</type>
    <format>COM2_PBT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[1]/operable</node>
    <!-- ^^ we use the operable property because it honors all conditions (powered, serviceable, turned on) -->
   </chunk>
   <chunk>
    <name>com2-ptt</name>
    <type>string</type>
    <format>COM2_PTT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[1]/fgcom-mumble/ptt</node>
   </chunk>
   <chunk>
    <name>com2-vol</name>
    <type>string</type>
    <format>COM2_VOL=%s</format> <!-- 0.0=mute, <=1.0 full -->
    <node>/instrumentation/comm[1]/fgcom-mumble/volume</node>
   </chunk>
   <chunk>
    <name>com2-txpwr</name>
    <type>string</type>
    <format>COM2_PWR=%s</format> <!-- in watts; Bendix KX165A typical 10w and yields a range of about 50nm@1500ft altitude?? -->
    <node>/instrumentation/comm[1]/tx-power</node>
   </chunk>
   <chunk>
    <name>com2-squelch</name>
    <type>string</type>
    <format>COM2_SQC=%s</format> <!-- 0.0=cutoff nothing, 1.0=cutoff any -->
    <node>/instrumentation/comm[1]/cutoff-signal-quality</node>
   </chunk>

   <!-- COM 3 -->
   <chunk>
    <name>com3-frequency</name>
    <type>string</type>
    <format>COM3_FRQ=%s</format>
    <node>/instrumentation/comm[2]/fgcom-mumble/selected-mhz</node>
   </chunk>
   <chunk>
    <name>com3-channel-width-khz</name>
    <type>string</type>
    <format>COM3_CWKHZ=%s</format>
    <node>/instrumentation/comm[2]/frequencies/selected-channel-width-khz</node>
   </chunk>
   <chunk>
    <name>com3-powerbutton</name>
    <type>string</type>
    <format>COM3_PBT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[2]/operable</node>
    <!-- ^^ we use the operable property because it honors all conditions (powered, serviceable, turned on) -->
   </chunk>
   <chunk>
    <name>com3-ptt</name>
    <type>string</type>
    <format>COM3_PTT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/comm[2]/fgcom-mumble/ptt</node>
   </chunk>
   <chunk>
    <name>com3-vol</name>
    <type>string</type>
    <format>COM3_VOL=%s</format> <!-- 0.0=mute, <=1.0 full -->
    <node>/instrumentation/comm[2]/fgcom-mumble/volume</node>
   </chunk>
   <chunk>
    <name>com3-txpwr</name>
    <type>string</type>
    <format>COM3_PWR=%s</format> <!-- in watts; Bendix KX165A typical 10w and yields a range of about 50nm@1500ft altitude?? -->
    <node>/instrumentation/comm[2]/tx-power</node>
   </chunk>
   <chunk>
    <name>com3-squelch</name>
    <type>string</type>
    <format>COM3_SQC=%s</format> <!-- 0.0=cutoff nothing, 1.0=cutoff any -->
    <node>/instrumentation/comm[2]/cutoff-signal-quality</node>
   </chunk>

   <!-- TODO: add more radios here. The plugin ignores not present radios automatically. -->
   <!--       Remember that you should also adjust the variable num_radios in combar.nas -->
   <!--       Also remember to push the ADF belows index up and adjust in addon-main.nas -->


   <!-- ADF radio / RDF -->
   <chunk>
    <!-- UDP RDF client port overwrite: This is needed, because FGFS currently
         cannot assign the sending client port, but chooses a random one -->
    <name>fgcom-udp-client-port</name>
    <type>string</type>
    <format>UDP_TGT_PORT=19991</format>
   </chunk>

   <chunk>
    <name>adf1-local-only</name>
    <type>string</type>
    <format>COM4_PUBLISH=%s</format>
    <node>/instrumentation/adf[0]/fgcom-mumble/publish</node>
   </chunk>
   <chunk>
    <name>adf1-operable</name>
    <type>string</type>
    <format>COM4_PBT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/adf[0]/operable</node>
    <!-- ^^ we use the operable property because it honors all conditions (powered, serviceable, turned on) -->
   </chunk>
   <chunk>
    <name>adf1-volume</name>
    <type>string</type>
    <format>COM4_VOL=%s</format> <!-- 0.0=mute, <=1.0 full -->
    <node>/instrumentation/adf[0]/fgcom-mumble/volume</node>
   </chunk>
   <chunk>
    <name>adf1-frequency</name>
    <type>string</type>
    <format>COM4_FRQ=%s</format>
    <node>/instrumentation/adf[0]/fgcom-mumble/selected-mhz</node>
   </chunk>
   <chunk>
    <name>adf1-enableRDF</name>
    <type>string</type>
    <format>COM4_RDF=%s</format>
    <node>/instrumentation/adf[0]/fgcom-mumble/rdf-enabled</node>
   </chunk>

   <chunk>
    <name>adf2-local-only</name>
    <type>string</type>
    <format>COM5_PUBLISH=%s</format>
    <node>/instrumentation/adf[1]/fgcom-mumble/publish</node>
   </chunk>
   <chunk>
    <name>adf2-operable</name>
    <type>string</type>
    <format>COM5_PBT=%s</format> <!-- 0=inactive, 1=active -->
    <node>/instrumentation/adf[1]/operable</node>
    <!-- ^^ we use the operable property because it honors all conditions (powered, serviceable, turned on) -->
   </chunk>
   <chunk>
    <name>adf2-volume</name>
    <type>string</type>
    <format>COM5_VOL=%s</format> <!-- 0.0=mute, <=1.0 full -->
    <node>/instrumentation/adf[1]/fgcom-mumble/volume</node>
   </chunk>
   <chunk>
    <name>adf2-frequency</name>
    <type>string</type>
    <format>COM5_FRQ=%s</format>
    <node>/instrumentation/adf[1]/fgcom-mumble/selected-mhz</node>
   </chunk>
   <chunk>
    <name>adf2-enableRDF</name>
    <type>string</type>
    <format>COM5_RDF=%s</format>
    <node>/instrumentation/adf[1]/fgcom-mumble/rdf-enabled</node>
   </chunk>

   <!-- FGCom 3.0 compatibility: /instrumentation/com[n]/ptt is never set from any aircraft except
        c182s or the combar-gui. The old FGCom protocol seems outdated and transmit an old property.
        To get compatibility out-of-the-box, we transmit the FGCom PTT property here.
        The UDP server takes care to parse this properly into the new format.
        Note however, this overrides the individual COM-PTTs above. -->
   <chunk>
    <name>fgcom-ptt-compatibility</name>
    <type>string</type>
    <format>PTT=%s</format> <!-- 0=inactive, 1=COM1, 2=COM2 -->
    <node>/controls/radios/comm-ptt</node>
   </chunk>

   <!--  #####################  -->
   <!--  #  POSITIONAL DATA  #  -->
   <!--  #####################  -->

   <chunk>
    <name>pos-longitude-deg</name>
    <type>float</type>
    <format>LON=%03.6f</format>
    <node>/position/longitude-deg</node>
   </chunk>

   <chunk>
    <name>pos-latitude-deg</name>
    <type>float</type>
    <format>LAT=%03.6f</format>
    <node>/position/latitude-deg</node>
   </chunk>

   <chunk>
    <name>pos-alt</name>
    <type>float</type>
    <format>ALT=%05.0f</format>
    <node>/position/altitude-agl-ft</node>
   </chunk>

   <!--  #########################  -->
   <!--  #  IDENTIFICATION DATA  #  -->
   <!--  #########################  -->

   <chunk>
    <name>callsign</name>
    <type>string</type>
    <format>CALLSIGN=%s</format>
    <node>/sim/multiplay/callsign</node>
   </chunk>

  </output>


  <input>
    <line_separator>newline</line_separator>
    <var_separator>,</var_separator>
    <!-- RDF info format is this: "RDF:CS_TX=Test,FRQ=123.45,DIR=180.5,VRT=12.5,QLY=0.98,ID_RX=1" -->
    <chunk>
        <name>RDF data: Callsign</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/callsign</node>
    </chunk>
    <chunk>
        <name>RDF data: Frequency</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/frequency</node>
    </chunk>
    <chunk>
        <name>RDF data: Direction</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/direction</node>
    </chunk>
    <chunk>
        <name>RDF data: vertical angle</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/angle</node>
    </chunk>
    <chunk>
        <name>RDF data: Quality</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/quality</node>
    </chunk>
    <chunk>
        <name>RDF data: Radio index</name>
        <type>string</type>
        <node>/instrumentation/adf[0]/fgcom-mumble/input/radio</node>
    </chunk>
  </input>

 </generic>
</PropertyList>
